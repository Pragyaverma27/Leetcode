class Solution {
public:
    struct valueCompare {
        char operator()(pair<char, int> &x, pair<char, int> &y){
            return y.second > x.second;
        }
    };
    
    string frequencySort(string s) {
        
        unordered_map<char, int> hash_map;
        for(char ch : s){
            hash_map[ch]++;
        }
        priority_queue<pair<char, int>, vector<pair<char, int>>, valueCompare> max_heap;
            for(auto entry : hash_map){
                max_heap.push(entry);
            }
        pair<char, int> prev(-1, -1);
        string res ="";
        while(!max_heap.empty()){
            pair<char, int> entry = max_heap.top();
            max_heap.pop();
            for(int i = 0; i < entry.second; i++) {
                res += entry.first;
            }
        }
        return res;
    }
};
